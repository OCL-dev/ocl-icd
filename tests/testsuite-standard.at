AT_BANNER([Standard compliant ocl-icd libOpenCL.so])

AT_SETUP([invalid OCL_ICD_VENDORS])
AT_EXPORT([OCL_ICD_DEBUG],[15],
          [OCL_ICD_VENDORS],[unexisting-vendors-dir])
AT_CHECK([ocl_test], 0, [No platforms found!
], [stderr])
AT_CLEANUP

AT_SETUP([OCL_ICD_VENDORS as directory])
AT_UNSET([OCL_ICD_ASSUME_ICD_EXTENSION])
AT_EXPORT([OCL_ICD_DEBUG],[7],
	  [OCL_ICD_VENDORS],[$abs_top_builddir/vendors])
dnl platforms can be listed in any order
AT_CHECK([ocl_test | env LC_ALL=C sort], 0, [Found 2 platforms!
ocl-icd ICD test
ocl-icd ICD test2
], [stderr])
AT_CLEANUP

AT_SETUP([OCL_ICD_VENDORS as library file])
AT_EXPORT([OCL_ICD_DEBUG],[7],
	  [OCL_ICD_VENDORS],[$abs_top_builddir/.libs/libdummycl.so])
AT_CHECK([ocl_test], 0, [Found 1 platforms!
ocl-icd ICD test
], [stderr])
AT_CLEANUP

AT_SETUP([OCL_ICD_VENDORS as ICD file (.icd)])
AT_EXPORT([OCL_ICD_DEBUG],[7],
	  [OCL_ICD_VENDORS],[$abs_top_builddir/vendors/dummycl.icd])
AT_CHECK([ocl_test], 0, [Found 1 platforms!
ocl-icd ICD test
], [stderr])
AT_CLEANUP

AT_SETUP([OPENCL_VENDOR_PATH as directory])
AT_UNSET([OCL_ICD_VENDORS])
AT_EXPORT([OCL_ICD_DEBUG],[7],
	  [OPENCL_VENDOR_PATH],[$abs_top_builddir/vendors])
AT_CHECK([ocl_test | env LC_ALL=C sort], 0, [Found 2 platforms!
ocl-icd ICD test
ocl-icd ICD test2
], [stderr])
AT_CLEANUP

AT_SETUP([invalid OPENCL_VENDOR_PATH (unknown path)])
AT_UNSET([OCL_ICD_VENDORS])
AT_EXPORT([OCL_ICD_DEBUG],[7],
	  [OPENCL_VENDOR_PATH],[unexisting-vendors-dir])
AT_CHECK([ocl_test], 0, [No platforms found!
], [stderr])
AT_CLEANUP

AT_SETUP([invalid OPENCL_VENDOR_PATH (.icd)])
AT_UNSET([OCL_ICD_VENDORS])
AT_EXPORT([OCL_ICD_DEBUG],[7],
	  [OPENCL_VENDOR_PATH],[$abs_top_builddir/vendors/dummycl.icd])
AT_CHECK([ocl_test], 0, [No platforms found!
], [stderr])
AT_CLEANUP

AT_SETUP([invalid OPENCL_VENDOR_PATH (library file)])
AT_UNSET([OCL_ICD_VENDORS])
AT_EXPORT([OCL_ICD_DEBUG],[7],
	  [OPENCL_VENDOR_PATH],[$abs_top_builddir/.libs/libdummycl.so])
AT_CHECK([ocl_test], 0, [No platforms found!
], [stderr])
AT_CLEANUP

AT_SETUP([OCL_ICD_VENDORS priority over OPENCL_VENDOR_PATH])
AT_UNSET([OCL_ICD_VENDORS])
AT_EXPORT([OCL_ICD_DEBUG],[7],
	  [OCL_ICD_VENDORS],[$abs_top_builddir/vendors/dummycl.icd],
	  [OPENCL_VENDOR_PATH],[$abs_top_builddir/vendors])
AT_CHECK([ocl_test], 0, [Found 1 platforms!
ocl-icd ICD test
], [stderr])
AT_CLEANUP

AT_SETUP([Our dummy ICD through our ICD loader])
AT_EXPORT([OCL_ICD_DEBUG],[7],
	  [OCL_ICD_VENDORS],[$abs_top_builddir/vendors])
AT_CHECK([run_dummy_icd_through_our_ICDL], 0, [stdout], [stderr])
AT_CHECK([grep "^-1" stdout | sort], 0, [])
AT_CHECK([grep -v '^[[0-9]]* *:' stdout ], 0, [---
])
AT_CHECK([sed -e "s/ *(expected)//" stdout | uniq -c | grep -v '^ *2 ' | sed "s/^ *//" ], 0, [1 ---
])
AT_CLEANUP

AT_SETUP([ICD Loader extension])
AT_EXPORT([OCL_ICD_DEBUG],[0],
	[OCL_ICD_VENDORS],[$abs_top_builddir/vendors])
AT_CHECK([ocl_test_icdl], 0,
[ocl_version: OpenCL AT_PACKAGE_OPENCL_VERSION
version: AT_PACKAGE_VERSION
name: OpenCL ICD Loader
vendor: OCL Icd free software
], [])
AT_CLEANUP

AT_SETUP([Our dummy layer through cllayerinfo])
AT_EXPORT([OPENCL_LAYERS],[$abs_top_builddir/.libs/libdummylayer.so],
	  [OCL_ICD_VENDORS],[$abs_top_builddir/vendors])
AT_CHECK_UNQUOTED([cllayerinfo], 0,
[$abs_top_builddir/.libs/libdummylayer.so:
	CL_LAYER_API_VERSION: 100
	CL_LAYER_NAME: dummylayer
], [])
AT_CLEANUP
